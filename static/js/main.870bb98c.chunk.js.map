{"version":3,"sources":["Service.js","component/Main.jsx","App.js","reportWebVitals.js","index.js"],"names":["url","service","data","axios","get","headers","params","responseType","then","response","post","Search","Input","TextArea","Main","props","state","last","predictions","pattern","feedbackRef","React","createRef","onSearch","bind","onSubmit","feedback","value","text","replace","this","slice","length","setState","console","log","that","predict","v","map","pred","index","label","key","catch","warn","notification","open","message","current","e","placement","className","options","style","width","id","placeholder","ref","rows","size","onClick","Component","withRouter","App","path","exact","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.870bb98c.chunk.js","sourcesContent":["import axios from \"axios\";\r\n// https for github\r\nconst API_URL = \"https://8.135.48.48\";\r\nconst url = `${API_URL}/api/`;\r\n// default host for aliyun\r\n// const url = `api/`;\r\nexport default class Service {\r\n    async predict(data) {\r\n        return axios\r\n            .get(url, {\r\n                headers: {\r\n                    \"Access-Control-Allow-Origin\": \"*\"\r\n                },\r\n\r\n                params: data,\r\n                responseType: \"json\"\r\n            })\r\n            .then((response) => response.data);\r\n    }\r\n\r\n    async feedback(data) {\r\n        return axios\r\n            .post(url, data, {\r\n                headers: {\r\n                    \"Access-Control-Allow-Origin\": \"*\"\r\n                },\r\n                responseType: \"json\"\r\n            })\r\n            .then((response) => response.data);\r\n    }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport { Input, Button, notification, AutoComplete } from \"antd\";\r\nimport Service from \"../Service\";\r\n\r\nconst service = new Service();\r\n\r\nconst { Search, TextArea } = Input;\r\n\r\nclass Main extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            last: \"\",\r\n            predictions: []\r\n        };\r\n        this.pattern = /[a-zA-Z`~!@#$^&*()=|{}':;',\\\\\\[\\]\\.<>\\/?~！@#￥……&*（）——|{}【】《》'；：\"\"'。，、？\\s \\t]/g;\r\n        this.feedbackRef = React.createRef();\r\n        this.onSearch = this.onSearch.bind(this);\r\n        this.onSubmit = this.onSubmit.bind(this);\r\n        this.feedback = this.feedback.bind(this);\r\n    }\r\n\r\n    onSearch(value) {\r\n        var text = value.replace(this.pattern, \"\");\r\n        text = text.slice(-10);\r\n        if (text === this.state.last) {\r\n            return;\r\n        }\r\n        if (value.length < 1) {\r\n            this.setState(() => {\r\n                return { last: text, predictions: [] };\r\n            });\r\n            return;\r\n        } else {\r\n            this.setState(() => {\r\n                return { last: text };\r\n            });\r\n        }\r\n\r\n        console.log(text);\r\n        console.log(text.length);\r\n\r\n        // [{predict: \"吗\"} {predict: \"好\"} {predict: \"我\"} {predict: \"看\"} {predict: \"运\"} ]\r\n        const that = this;\r\n        service\r\n            .predict({ data: text })\r\n            .then((v) => {\r\n                if (v.length > 0) {\r\n                    console.log(v);\r\n                    that.setState(() => {\r\n                        return {\r\n                            predictions: v.map((pred, index) => {\r\n                                return {\r\n                                    value: value + pred.predict,\r\n                                    label: (\r\n                                        <span key={pred + index}>\r\n                                            {value + pred.predict}\r\n                                        </span>\r\n                                    )\r\n                                };\r\n                            })\r\n                        };\r\n                    });\r\n                }\r\n            })\r\n            .catch((v) => {\r\n                console.warn(v);\r\n                // console.warn(\"can't require data\");\r\n            });\r\n    }\r\n\r\n    onSubmit() {\r\n        notification.open({\r\n            message: \"假设已经搜索完了\"\r\n            // description: \"而且可能也不会做这个\"\r\n        });\r\n    }\r\n\r\n    feedback() {\r\n        const value = this.feedbackRef.current.state.value;\r\n        if (value.length < 2) {\r\n            return;\r\n        }\r\n        console.log(value);\r\n        service\r\n            .feedback({ data: value })\r\n            .then((e) => {\r\n                console.log(e);\r\n                notification.open({\r\n                    message: \"收到反馈了，感谢支持\",\r\n                    placement: \"bottomRight\"\r\n                });\r\n            })\r\n            .catch((e) => {\r\n                notification.open({\r\n                    message: \"没成功，再试一次吧\",\r\n                    placement: \"bottomRight\"\r\n                });\r\n                console.warn(e);\r\n            });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"app-main\">\r\n                <AutoComplete\r\n                    options={this.state.predictions}\r\n                    onSearch={this.onSearch}\r\n                    style={{ width: 400 }}\r\n                >\r\n                    <Search\r\n                        id=\"search81\"\r\n                        placeholder=\"可以预测你输入的汉字\"\r\n                        onSearch={this.onSubmit}\r\n                        style={{ width: 400 }}\r\n                    />\r\n                </AutoComplete>\r\n\r\n                <br />\r\n                <br />\r\n                <br />\r\n                <br />\r\n                <TextArea\r\n                    id=\"textarea13\"\r\n                    ref={this.feedbackRef}\r\n                    placeholder=\"可以反馈点什么\"\r\n                    rows={4}\r\n                    size=\"large\"\r\n                    style={{ width: 400 }}\r\n                />\r\n                <Button onClick={this.feedback} style={{ width: 400 }}>\r\n                    {\"biu~\"}\r\n                </Button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withRouter(Main);\r\n","import React, { Component } from \"react\";\nimport { HashRouter, Route } from \"react-router-dom\";\nimport \"./App.css\";\nimport Main from \"./component/Main\";\nclass App extends Component {\n    render() {\n        return (\n            <HashRouter>\n                <>\n                    <Route path=\"/\" exact component={Main} />\n                    <Route path=\"/about/\" exact component={Main} />\n                </>\n            </HashRouter>\n        );\n    }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}