{"version":3,"sources":["component/Main.jsx","Service.js","App.js","reportWebVitals.js","index.js"],"names":["service","data","axios","get","headers","params","responseType","then","response","post","Search","Input","TextArea","Main","props","state","predictions","feedbackRef","React","createRef","onSearch","bind","onSubmit","feedback","value","length","this","setState","text","slice","test","console","log","that","predict","v","map","pred","label","catch","warn","notification","open","message","description","current","e","placement","className","options","style","width","id","placeholder","ref","rows","size","onClick","Component","withRouter","App","path","exact","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b92e6d19.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport { Input, Button, notification, AutoComplete } from \"antd\";\r\nimport Service from \"../Service\";\r\n\r\nconst service = new Service();\r\n\r\nconst { Search, TextArea } = Input;\r\n\r\nclass Main extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            predictions: []\r\n        };\r\n\r\n        this.feedbackRef = React.createRef();\r\n        this.onSearch = this.onSearch.bind(this);\r\n        this.onSubmit = this.onSubmit.bind(this);\r\n        this.feedback = this.feedback.bind(this);\r\n    }\r\n\r\n    onSearch(value) {\r\n        if (value.length < 2) {\r\n            this.setState(() => {\r\n                return { predictions: [] };\r\n            });\r\n            return;\r\n        }\r\n        const text = value.slice(-2);\r\n        var reg = /[0-9a-zA-Z]+/;\r\n        // contain number or letter\r\n        if (reg.test(text)) {\r\n            return;\r\n        }\r\n\r\n        console.log(text);\r\n\r\n        // {predict: \"吗\"}\r\n        // {predict: \"好\"}\r\n        // {predict: \"我\"}\r\n        // {predict: \"看\"}\r\n        // {predict: \"运\"}\r\n        const that = this;\r\n        service\r\n            .predict({ data: text })\r\n            .then((v) => {\r\n                if (v.length > 0) {\r\n                    console.log(v);\r\n                    that.setState(() => {\r\n                        return {\r\n                            predictions: v.map((pred) => {\r\n                                return {\r\n                                    value: value + pred.predict,\r\n                                    label: <span>{value + pred.predict}</span>\r\n                                };\r\n                            })\r\n                        };\r\n                    });\r\n                }\r\n            })\r\n            .catch((v) => {\r\n                console.warn(v);\r\n                // console.warn(\"can't require data\");\r\n            });\r\n    }\r\n\r\n    onSubmit() {\r\n        notification.open({\r\n            message: \"这个还没做呢\",\r\n            description: \"而且可能也不会做这个\"\r\n        });\r\n    }\r\n\r\n    feedback() {\r\n        const value = this.feedbackRef.current.state.value;\r\n        if (value.length < 2) {\r\n            return;\r\n        }\r\n        console.log(value);\r\n        service\r\n            .feedback({ data: value })\r\n            .then((e) => {\r\n                console.log(e);\r\n                notification.open({\r\n                    message: \"收到反馈了，感谢支持\",\r\n                    placement: \"bottomRight\"\r\n                });\r\n            })\r\n            .catch((e) => {\r\n                notification.open({\r\n                    message: \"没成功，再试一次吧\",\r\n                    placement: \"bottomRight\"\r\n                });\r\n                console.warn(e);\r\n            });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"app-main\">\r\n                <AutoComplete\r\n                    options={this.state.predictions}\r\n                    onSearch={this.onSearch}\r\n                    style={{ width: 400 }}\r\n                >\r\n                    <Search\r\n                        id=\"search81\"\r\n                        placeholder=\"输入什么呢\"\r\n                        onSearch={this.onSubmit}\r\n                        style={{ width: 400 }}\r\n                    />\r\n                </AutoComplete>\r\n\r\n                <br />\r\n                <br />\r\n                <br />\r\n                <br />\r\n                <TextArea\r\n                    id=\"textarea13\"\r\n                    ref={this.feedbackRef}\r\n                    placeholder=\"说点什么吧\"\r\n                    rows={4}\r\n                    size=\"large\"\r\n                    style={{ width: 400 }}\r\n                />\r\n                <Button onClick={this.feedback} style={{ width: 400 }}>\r\n                    {\"biu~\"}\r\n                </Button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withRouter(Main);\r\n","import axios from \"axios\";\r\n\r\nexport default class Service {\r\n    async predict(data) {\r\n        const url = `api/`;\r\n        return axios\r\n            .get(url, {\r\n                headers: {\r\n                    \"Access-Control-Allow-Origin\": \"*\"\r\n                },\r\n\r\n                params: data,\r\n                responseType: \"json\"\r\n            })\r\n            .then((response) => response.data);\r\n    }\r\n\r\n    async feedback(data) {\r\n        const url = `api/`;\r\n        return axios\r\n            .post(url, data, {\r\n                headers: {\r\n                    \"Access-Control-Allow-Origin\": \"*\"\r\n                },\r\n                responseType: \"json\"\r\n            })\r\n            .then((response) => response.data);\r\n    }\r\n}\r\n","import React, { Component } from \"react\";\nimport { HashRouter, Route } from \"react-router-dom\";\nimport \"./App.css\";\nimport Main from \"./component/Main\";\nclass App extends Component {\n    render() {\n        return (\n            <HashRouter>\n                <>\n                    <Route path=\"/\" exact component={Main} />\n                    <Route path=\"/about/\" exact component={Main} />\n                </>\n            </HashRouter>\n        );\n    }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}